[
    {
        "title": "Hosting a simple Code Editor on S3 - testing 123",
        "entry": "\n\nfgdhasjgfjdkhasgf hgfhjdagkfhjds ghfagjdhfgaks jd I got this old code editor project sitting in github without much description - repo link. So I thought why not try to host it on S3 so I could showcase it in the repo.\nAlso it’s a good pratice to brush up my knowledge on some of the AWS services (S3, CloudFront, Route53). After almost an hour, I got the site up so it’s not too bad. Below are the steps that I took.\n\nCreate a S3 bucket and upload my code to this new bucket - ceditor.tdinvoke.net.\n\nEnable “Static website hosting” on the bucket\n\nCreate a web CloudFront without following settings (the rest are set with default)\n\nOrigin Domain Name: endpoint url in S3 ceditor.tdinvoke.net ‘Static Website Hosting’\nAlternate Domain Names (CNAMEs): codeplayer.tdinvoke.net\nViewer Protocol Policy: Redirect HTTP to HTTPS\nSSL Certificate: Custom SSL Certificate - reference my existing SSL certificate\n\n\nCreate new A record in Route 53 and point it to the new CloudFront Distributions\n\n\nAaand here is the site: https://codeplayer.tdinvoke.net/\nNext I need to go back to the repo and write up a readme.md for it.\n"
    },
    {
        "title": "Get AWS IAM credentials report script",
        "entry": "\nQuick powershell script to generate and save AWS IAM credentials report to csv format on a local location.\n\n"
    },
    {
        "title": "My random podcast app fkdjahfkjdahskj",
        "entry": "\n\nI’ve been trying to catch up with a few podcasts and can’t decide  what to listen to first. So I thought, let create an app that could pick out a random episode for me. Less thinking about picking and more time listening!\nSo here is what I came up with.\n\nI thought it would be straight forward but it took me the whole weekend to get it up T__T\nThere are 4 lambda functions in this app.\n1- update-station: trigger whenever a new item is added to stationsDB. This will crawl the site main page to get episode playlist and insert that back to stationsDB as list_url\n2- update-episode: trigger by update-station function or a monthly cloudwatch event. This function will loop through the stationsdb and run the item’s spider fucntion on its list_url. The output would be a list of 50 most recent episodes for each stations. This list would then get compare with all episodes added to episodesDB. The differences would then get added to episodesDB\n3- gen-random-episode: trigger by api gateway when an episode is finished playing at https://blog.tdinvoke.net/random-podcast/. This funciton would first change the current episode status ‘completed’. Then it would pull out all episodes url from episodeDB that haven’t play (with blank status). Random pick out 1 episode and change its status to current.\n4- get-current-episode: trigger by api gateway when the page https://blog.tdinvoke.net/random-podcast/ is loaded. This one is simple, pull episode with ‘current’ status.\nYou can find the codes here\nTo see the app in action, please visit here\nIssues encountered/thoughts:\n\nAdd a UI page to modify the station DB. I’ll have to workout how to put authorisation in API call to add new station.\nSplit crawler functions into separate lambda functions which make the functions clean and easy to manage.\nAdd more crawler.At the moment, this app only crawl playerfm stations.\nLearnt how to add js scripts to Hexo. There arn’t much information on how to it out there. I had to hack around for awhile. Basically, I need to create a new script folder at thems/‘my-theme’/source/‘td-podcast’. Chuck all my js scripts in there, then modify ‘_partials/scripts.ejs’ to reference the source folder. Learnt a bit of ejs as well.\nChalice doesn’t have Dynamodb stream trigger, gave up halfway and gone back to create the lambda functions manually.\nLooking into SAM and CloudFormation to do CI/CD on this. \nCould turn this into youtube/twitch random video. Looking into Youtube Google api and Twitch api.\n\n"
    },
    {
        "title": "AWS WAF automations",
        "entry": "\n\nA friend of mine suggested that I should write something about AWS WAF security automations. This is mentioned in the Use AWS WAF to Mitigate OWASP’s Top 10 Web Application Vulnerabilities whitepaper and there are plenty of materials about this solution on the net. So I thought, instead of writing about what it is / how to set it up, let have some funs ddos my own site and actually see how it works.\nI’m going to try to break my site with 3 different methods.\n1. http flood attackMy weapon of choice is PyFlooder.\n\nAfter about 5000 requests, the lambda function started to kick in and blocked my access to the side. I can also see my ip has been blocked on WAF http flood rule.\n \nI then removed the ip from the blocked list and onto the next attack.\n2. XSSNext up is XSS, input a simple <script> tag on to the uri and I got 403 error straight away.\n\n3. BadbotFor this method I used scrapy. Wrote a short spider script to crawl my site, targeting the honeypot url.\n\nRelease the spider!!!!\n\nand got the 403 error as expected.\n\nIssues encountered/thoughts:\nSetting up the bot wasn’t easy as I expected, but I learnt a lot about scrapy.\n\nI accidentally/unknowingly deleted the badbot ip list from the badbot rule. Only found out about the silly mistake by going through the whole pipeline (api gateway -> lambda -> waf ip list -> waf rule) to troubleshoot the issue.\n\nPyFlooder is not compatible with windows os. Had to spin up a ubuntu vm to run it.\n\nLearnt how to add file to source for Hexo. Not complicated at all, just chuck the file into /source folder. Do not use the hexo-generator-robotstxt plugin, I almost broken my site because of it.\n\nOverall this was an interesting exercise - breaking is always more fun than building!\n\n\n"
    }
]